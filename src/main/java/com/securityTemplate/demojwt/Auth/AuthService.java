package com.securityTemplate.demojwt.Auth;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.securityTemplate.demojwt.Jwt.JwtService;
import com.securityTemplate.demojwt.User.Role;
import com.securityTemplate.demojwt.User.User;
import com.securityTemplate.demojwt.User.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserRepository userRepository;
    private final JwtService jwtService;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;

    /**
     * The `login` function authenticates a user, generates a JWT token, and returns an `AuthResponse`
     * containing the token.
     * 
     * @param request The `request` parameter in the `login` method of the code snippet is of type
     * `LoginRequest`. It likely contains the username and password that a user has entered while
     * trying to log in.
     * @return An `AuthResponse` object is being returned, which contains a token generated by the
     * `jwtService` after successful authentication.
     */
    public AuthResponse login(LoginRequest request) {
        authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));
        UserDetails user=userRepository.findByUsername(request.getUsername()).orElseThrow();
        String token=jwtService.getToken(user);
        return AuthResponse.builder()
            .token(token)
            .build();

    }

    /**
     * The `register` function creates a new user based on the provided registration request and
     * returns an authentication response with a JWT token.
     * 
     * @param request The `register` method takes a `RegisterRequest` object as a parameter. This
     * object likely contains information such as the username, password, first name, last name, and
     * country of the user being registered.
     * @return An `AuthResponse` object is being returned, which contains a token generated by the
     * `jwtService` using the user information provided in the `RegisterRequest`.
     */
    public AuthResponse register(RegisterRequest request) {
        User user = User.builder()
            .username(request.getUsername())
            .password(passwordEncoder.encode( request.getPassword()))
            .firstname(request.getFirstname())
            .lastname(request.lastname)
            .country(request.getCountry())
            .role(Role.USER)
            .build();

        userRepository.save(user);

        return AuthResponse.builder()
            .token(jwtService.getToken(user))
            .build();
        
    }

}
